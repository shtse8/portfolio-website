---
description: Frontend Architecture Guide
globs: 
alwaysApply: true
---
## Core Architecture
- Next.js App Router with TypeScript and React Server Components as the foundation
- Tailwind CSS with Shadcn UI and Radix UI for consistent, accessible styling
- Strict TypeScript implementation throughout the codebase

## Project Structure
```
/app         # Next.js App Router pages and layouts
/components  # Reusable UI components (organized by domain/feature)
/lib         # Utility functions, API clients, and constants
/hooks       # Custom React hooks
/types       # TypeScript type definitions
/styles      # Global styles and Tailwind configurations
```

## Component Guidelines
- Use functional components exclusively
- Export named components for better debugging and tree-shaking
- Structure files: types → component → subcomponents → helpers
- Place client-side components in separate files with 'use client' directive
- Wrap client components with `<Suspense>` boundaries for better loading states

## TypeScript Patterns
- Prefer interfaces for object shapes
- Use literal union types instead of enums
- Define prop interfaces above components
- Use discriminated unions for complex state management

## State Management
- Leverage React Server Components for data fetching when possible
- Implement useSearchParams with nuqs for URL-based state
- Minimize global state; prefer composition and context when appropriate
- Structure forms with React Hook Form and Zod validation

## Performance Optimization
- Implement image optimization with Next.js Image component
- Use dynamic imports for heavy components
- Implement proper code-splitting strategies
- Optimize key Web Vitals (LCP, CLS, FID)
- Implement appropriate data caching strategies

## Naming Conventions
- Components: PascalCase (UserProfile.tsx)
- Functions/Hooks: camelCase with auxiliary verbs (useUserData, isLoggedIn)
- Directories: kebab-case (user-profiles)
- Constants: UPPER_SNAKE_CASE (API_ENDPOINTS)
- Types/Interfaces: PascalCase (UserData)

## Data Fetching
- Use React Server Components for data fetching
- Implement proper error boundary handling
- Use SWR or React Query for client-side data fetching
- Implement optimistic updates for better user experience

## Accessibility
- Implement proper semantic HTML5 elements
- Use ARIA attributes appropriately
- Ensure keyboard navigation works throughout the application
- Test with screen readers
- Maintain appropriate color contrast ratios

## Testing
- Implement unit tests with Jest/Vitest
- Use React Testing Library for component tests
- Create integration tests for critical user flows
- Implement E2E tests with Playwright